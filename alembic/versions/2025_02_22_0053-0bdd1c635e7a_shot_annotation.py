"""shot annotation

Revision ID: 0bdd1c635e7a
Revises: ebb6a77afd0e
Create Date: 2025-02-22 00:53:52.603615

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy import inspect

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0bdd1c635e7a"
down_revision: Union[str, None] = "ebb6a77afd0e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name):
    """Helper function to check if a table exists"""
    inspector = inspect(op.get_bind())
    return table_name in inspector.get_table_names()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exists("shot_annotation"):
        op.create_table(
            "shot_annotation",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("history_id", sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(
                ["history_id"],
                ["history.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("history_id"),
        )

    if not table_exists("shot_rating"):
        op.create_table(
            "shot_rating",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("annotation_id", sa.Integer(), nullable=False),
            sa.Column("basic", sa.Text(), nullable=True),
            sa.ForeignKeyConstraint(
                ["annotation_id"],
                ["shot_annotation.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("annotation_id"),
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if table_exists("shot_rating"):
        op.drop_table("shot_rating")
    if table_exists("shot_annotation"):
        op.drop_table("shot_annotation")
    # ### end Alembic commands ###
